import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class LotFromBOMX {

    static class Node {
        String code;
        List<Node> children = new ArrayList<>();

        Node(String code) {
            this.code = code;
        }
    }

    static Map<String, Node> nodeMap = new HashMap<>();
    static Map<String, String> lotMap = new LinkedHashMap<>();
    static Map<String, Integer> prcSeqMap = new HashMap<>();
    static String today = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd"));

    // 공정 매핑 (제품코드 → 공정코드)
    static Map<String, String> processMap = Map.of(
        "MTL-001", "IN",
        "MTL-002", "IN",
        "MTL-003", "IN",
        "MTL-010", "IN",
        "WIP001", "PR",
        "WIP002", "PR",
        "WIP006", "WE",
        "WIP010", "SA",
        "WIP013", "PA",
        "FP001",   "PK"
    );

    public static void main(String[] args) {

        // 1. BOMX 데이터 입력 (PARENT → CHILD 구조)
        List<String[]> bomx = List.of(
            new String[]{"FP001", "WIP013"},
            new String[]{"WIP013", "WIP010"},
            new String[]{"WIP010", "MTL-010"},
            new String[]{"WIP010", "WIP006"},
            new String[]{"WIP006", "MTL-003"},
            new String[]{"WIP006", "WIP001"},
            new String[]{"WIP001", "MTL-001"},
            new String[]{"WIP006", "WIP002"},
            new String[]{"WIP002", "MTL-002"}
        );

        // 2. 노드 트리 구성
        for (String[] pair : bomx) {
            String parent = pair[0];
            String child = pair[1];

            nodeMap.putIfAbsent(parent, new Node(parent));
            nodeMap.putIfAbsent(child, new Node(child));

            nodeMap.get(parent).children.add(nodeMap.get(child));
        }

        // 3. 루트부터 LOT 번호 재귀 생성
        generateLotRecursive(nodeMap.get("FP001"));

        // 4. 결과 출력
        lotMap.forEach((code, lot) -> {
            System.out.println("제품: " + code + " → LOT: " + lot);
        });
    }

    private static void generateLotRecursive(Node node) {
        for (Node child : node.children) {
            generateLotRecursive(child);
        }

        if (!lotMap.containsKey(node.code)) {
            String prc = processMap.getOrDefault(node.code, "XX");
            int seq = prcSeqMap.getOrDefault(prc, 0) + 1;
            prcSeqMap.put(prc, seq);

            String lotCode = "LOT-" + today + "-" + prc + "-" + String.format("%03d", seq);
            lotMap.put(node.code, lotCode);
        }
    }
}
