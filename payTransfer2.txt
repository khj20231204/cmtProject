// 급여 이체
	@PostMapping("/payTransfer")
	@ResponseBody

	public String payTransfer(@RequestParam("position") String position, @RequestParam("empIdList") List<String> empIdList, Model model) {	
		
		//System.out.println("position:"+position+" ,empIdList:"+empIdList);
		
		//사원 정보
		List<PayEmpListDTO> payEmpList = salaryService.getEmpInfo(empIdList);
		
		// 급여 지급일 조회		
		String payday = salaryService.getPayDay();
		
	    //int dayOfMonth = Integer.parseInt(payday.getCmnDetailValue());
	    LocalDate today = LocalDate.now();
	    int todayInt = today.getDayOfMonth();
	    String todayStr = String.valueOf(todayInt);
	    
	    int year = today.getYear();
	    int month = today.getMonthValue();
	    
	    LocalDate date = LocalDate.of(year, month, 20); // 그달의 20일
	    
	    //지급일이 아닌 경우 바로 return
	    /*
	    if(!(payday.equals(todayStr) && !isHoliday(date))) {
	    	
	    	return "fail";
	    	
	    }*/
	    
		// 직급별 기본급 가져오기
		List<PayBasicDTO> payBasicList = salaryService.getPayBasic();
		/*
		E.EMP_ID,
	   	E.EMP_NAME,
	    E.POSITION_NO,
	    CD.CMN_DETAIL_VALUE AS payBasic,
	    CD.CMN_DETAIL_NAME AS position
		*/
		 
		// 수당
		List<CommonCodeDetailDTO> bonusList = commonService.getCommonCodeDetails("BONUS", null);
		// 공제
		List<CommonCodeDetailDTO> taxList = commonService.getCommonCodeDetails("TAX", null);
		
		List<Map<String, BigDecimal>> evaluatedResult = new ArrayList<>();
		
		// 수식 평가 반복 => 수당(BONUS) 계산
		for(CommonCodeDetailDTO bonus : bonusList) {
			String expression = bonus.getCmnDetailValue2(); // 계산식
			String columnName = bonus.getCmnDetailValue();
			
			System.out.println("columnName:"+columnName); //PAY_BONUS_OVERTIME, PAY_BONUS_HOLIDAY
			
			String[] operandNames = expression.split("[+\\-\\*/]");
			System.out.println("추출한 피연산자 이름 목록 : " + Arrays.toString(operandNames));
			
			//List<Double> values = List.of(50.0, 20.0, 30.0); // 샘플 피연산자
			// List<Object> values = List.of(50.0, 20, 30.0);
			
			
			List<CommonCodeDetailDTO> values = commonService.getCommonCodeDetails("POSITION", null);
			
//			for(CommonCodeDetailDTO c : values) {
//				System.out.println(c.getCmnDetailValue());
//			}
			
			//System.out.println(values);
			
			// 수식 평가 수행할 JexlEngine 객체 생성
			JexlEngine jexl = new JexlBuilder().create();
			
			// 문자열 수식을 JexlExpression 객체를 통해 실제 식으로 변환
			JexlExpression jexlExpression = jexl.createExpression(expression); 
			System.out.println(jexlExpression.getSourceText()); //PAY_BASIC * 0.5
			
			// 수식에 사용될 피연산자를 관리하는 JexlContext 객체 생성
			JexlContext context = new MapContext();
			
//			List<Long> payValue = new ArrayList<>();
//			for(PayBasicDTO pay : payBasicList) {
//				payValue.add(pay.getPayBasic());
//				
//			}
			for(PayBasicDTO p : payBasicList) {
				
				if(operandNames[0].equals("PAY_BASIC")) {
					
				}else if(operandNames[0].equals("PAY_TAX_INCOME")) {
					
				}else if(operandNames[0].equals("PAY_TAX_HEALTH")) {
					
				}else {
					System.out.println("etc");
				}
				
				
				
				System.out.println("expression:" + expression);
				Long payBasicValue = p.getPayBasic();
				
				context.set("PAY_BASIC", payBasicValue);
				//context.set("PAY_BASIC", payValue);
				//System.out.println(context.get("PAY_BASIC"));
				
				
				// 연산식에 피연산자 대입하여 실제 연산 수행 후 Object 타입으로 결과값 리턴
				Object result = jexlExpression.evaluate(context);
				
				
				//System.out.println("-----확인 : " + result);
				
				
				Map<String, BigDecimal> map = new HashMap<>();
				//map.put(column,(BigDecimal)result);
				
				evaluatedResult.add(map);
			}
		}

		
	    	
	    
		return "success";
	}