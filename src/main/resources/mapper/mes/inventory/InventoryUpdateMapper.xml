<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.cmtProject.mapper.mes.inventory.InventoryUpdateMapper">
	
	
  <!-- 입고 검사 업데이트 쿼리 -->
  <update id="updateReceiptStatus" parameterType="String">
    UPDATE MATERIAL_RECEIPT mr
    SET mr.RECEIPT_STATUS = 
        CASE 
            WHEN EXISTS (
                SELECT 1 
                FROM IQC i 
                WHERE i.RECEIPT_CODE = mr.RECEIPT_CODE 
                AND i.IQC_INSPECTION_STATUS = '검사완료'
                AND i.IQC_INSPECTION_RESULT = '합격'
            ) THEN '검사합격'
            WHEN EXISTS (
                SELECT 1 
                FROM IQC i 
                WHERE i.RECEIPT_CODE = mr.RECEIPT_CODE 
                AND i.IQC_INSPECTION_STATUS = '검사완료'
                AND i.IQC_INSPECTION_RESULT = '불합격'
            ) THEN '검사불합격'
            ELSE mr.RECEIPT_STATUS
        END

    WHERE mr.RECEIPT_CODE = #{receiptCode}  <!-- no - > code 변경 -->

    AND EXISTS (
        SELECT 1 
        FROM IQC i 
        WHERE i.RECEIPT_CODE = mr.RECEIPT_CODE 
        AND i.IQC_INSPECTION_STATUS = '검사완료'
    )
  </update>
  
  <!-- 생산계획 업데이트 쿼리 -->
<!-- 수주 코드를 기반으로 자재 재고의 할당 수량을 다건 업데이트하는 쿼리 -->
<update id="updateAllocatedQtyWithMerge" parameterType="java.util.Map">
    <!-- 판매주문 코드를 기반으로 자재 재고와 제품 재고를 함께 업데이트하는 쿼리 -->
    
    <!-- 1. 자재 재고 테이블(MATERIAL_INVENTORY) 업데이트 -->
    MERGE INTO MATERIAL_INVENTORY INVEN <!-- 업데이트할 첫 번째 대상 테이블(자재 재고) -->
    USING (
        <!-- 판매주문에 연결된 자재와 필요 수량 계산 -->
        SELECT 
            BOM.PARENT_PDT_CODE,                <!-- 자재 코드 -->
            BOM.BOM_QTY * #{soQty} AS REQUIRED_QTY  <!-- BOM 단위 수량에 주문 수량을 곱한 실제 필요 수량 -->
        FROM (
            <!-- 계층적 BOM 구조에서 필요한 자재/제품 목록 조회 -->
            SELECT 
                B.PARENT_PDT_CODE,              <!-- 부모 자재/제품 코드 -->
                B.BOM_QTY                       <!-- BOM에 정의된 단위당 필요 수량 -->
            FROM BOM B                          <!-- BOM 테이블 -->
            START WITH B.CHILD_ITEM_CODE = (    <!-- 계층 쿼리 시작 지점 설정 -->
                SELECT PDT_CODE                 <!-- 판매 주문의 제품 코드 조회 -->
                FROM SALES_ORDER
                WHERE SO_CODE = #{soCode}       <!-- 파라미터로 받은 판매 주문 코드 -->
            )
            CONNECT BY PRIOR B.PARENT_PDT_CODE = B.CHILD_ITEM_CODE  <!-- 계층 구조 연결 조건 -->
            ORDER SIBLINGS BY B.PARENT_PDT_CODE <!-- 같은 레벨의 자재/제품 코드 순으로 정렬 -->
        ) BOM
        WHERE BOM.PARENT_PDT_CODE LIKE 'MTL%'   <!-- 자재 코드로 시작하는 항목만 필터링 -->
    ) SRC                                       <!-- 서브쿼리 결과의 별칭 -->
    ON (INVEN.MTL_CODE = SRC.PARENT_PDT_CODE)   <!-- 매칭 조건: 자재 재고 테이블의 자재 코드와 BOM의 자재 코드 일치 -->
    
    WHEN MATCHED THEN                           <!-- 일치하는 레코드가 있을 때 수행할 작업 -->
    UPDATE SET
        INVEN.ALLOCATED_QTY = TO_CHAR(SRC.REQUIRED_QTY),  <!-- 계산된 필요 수량으로 할당 수량 업데이트 -->
        INVEN.UPDATED_BY = #{updatedBy},        <!-- 업데이트 수행자 정보 설정 -->
        INVEN.UPDATED_DATE = SYSDATE;           <!-- 업데이트 시간을 현재 시간으로 설정, 세미콜론으로 명령 구분 -->
        
    <!-- 2. 제품 재고 테이블(PRODUCTS_INVENTORY) 업데이트 -->
    MERGE INTO PRODUCTS_INVENTORY INVEN <!-- 업데이트할 두 번째 대상 테이블(제품 재고) -->
    USING (
        <!-- 판매주문에 연결된 제품과 필요 수량 계산 -->
        SELECT 
            BOM.PARENT_PDT_CODE,                <!-- 제품 코드 -->
            BOM.BOM_QTY * #{soQty} AS REQUIRED_QTY  <!-- BOM 단위 수량에 주문 수량을 곱한 실제 필요 수량 -->
        FROM (
            <!-- 계층적 BOM 구조에서 필요한 자재/제품 목록 조회 (1번 쿼리와 동일한 서브쿼리) -->
            SELECT 
                B.PARENT_PDT_CODE,              <!-- 부모 자재/제품 코드 -->
                B.BOM_QTY                       <!-- BOM에 정의된 단위당 필요 수량 -->
            FROM BOM B                          <!-- BOM 테이블 -->
            START WITH B.CHILD_ITEM_CODE = (    <!-- 계층 쿼리 시작 지점 설정 -->
                SELECT PDT_CODE                 <!-- 판매 주문의 제품 코드 조회 -->
                FROM SALES_ORDER
                WHERE SO_CODE = #{soCode}       <!-- 파라미터로 받은 판매 주문 코드 -->
            )
            CONNECT BY PRIOR B.PARENT_PDT_CODE = B.CHILD_ITEM_CODE  <!-- 계층 구조 연결 조건 -->
            ORDER SIBLINGS BY B.PARENT_PDT_CODE <!-- 같은 레벨의 자재/제품 코드 순으로 정렬 -->
        ) BOM
        WHERE BOM.PARENT_PDT_CODE NOT LIKE 'MTL%'   <!-- 자재가 아닌 제품 코드만 필터링 -->
    ) SRC                                       <!-- 서브쿼리 결과의 별칭 -->
    ON (INVEN.PDT_CODE = SRC.PARENT_PDT_CODE)   <!-- 매칭 조건: 제품 재고 테이블의 제품 코드와 BOM의 제품 코드 일치 -->
    
    WHEN MATCHED THEN                           <!-- 일치하는 레코드가 있을 때 수행할 작업 -->
    UPDATE SET
        INVEN.ALLOCATED_QTY = TO_CHAR(SRC.REQUIRED_QTY),  <!-- 계산된 필요 수량으로 할당 수량 업데이트 -->
        INVEN.UPDATED_BY = #{updatedBy},        <!-- 업데이트 수행자 정보 설정 -->
        INVEN.UPDATED_DATE = SYSDATE            <!-- 업데이트 시간을 현재 시간으로 설정 -->
</update>
    
</mapper>