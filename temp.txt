<!DOCTYPE html>
	<html xmlns:th="http://www.thymeleaf.org" 
	      xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
	      xmlns:sec="http://www.thymeleaf.org/extras/spring-security"
	      layout:decorate="~{layouts/layout}"> 
	<head>
		
	<!-- date-picker -->
	<link rel="stylesheet" href="https://uicdn.toast.com/tui.date-picker/latest/tui-date-picker.min.css">
	<script src="https://uicdn.toast.com/tui.date-picker/latest/tui-date-picker.min.js"></script>
		
	<!-- toast 부트스트랩 기본 -->
	<link rel="stylesheet" href="https://uicdn.toast.com/tui.grid/latest/tui-grid.min.css">
	<script src="https://uicdn.toast.com/tui.grid/latest/tui-grid.min.js"></script>

	<title>CMT</title>
	<style>
		
    .container1 {
        display: grid;
		grid-template-columns: 150px 170px 100px 200px 50px 200px 160px 150px 100px 100px 100px 1fr; 
        gap: 3px;
        background: #f5f5f5;
        padding: 4px;
        border-radius: 5px;
		border : 1px solid black;
		text-align: center;
		width: 1600px;
    }
	
	.container2 {
        display: grid;
		grid-template-columns: 150px 200px 200px 150px 200px 200px 150px 200px 1fr; 
        gap: 3px;
        background: #f5f5f5;
        padding: 4px;
        border-radius: 5px;
		border : 1px solid black;
		text-align: center;
		width: 1600px;
    }
		
	
    .container input, .container select {
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 3px;
    }
	
    .button-container {
        display: flex;
        gap: 5px;
        margin: 10px;
		justify-content: space-between;
    }
	
    button {
        padding: 5px 10px;
        border: none;
        cursor: pointer;
        border-radius: 3px;
    }
    
	/*
    .tui-grid-container {
     	width: 1700px !important; 
    }
	
	.tui-grid-rside-area {
		width: 1700px !important;
	}*/
	
	.selecedRowClass {
	    background-color:aliceblue !important;
	    color: white;
	 }
	
    .searchBtn { background:dodgerblue; color: white; }
    .requestBtn { background: purple; color: white; }
    .completeBtn { background: green; color: white; }
    .cancelBtn { background: red; color: white; }
    .excelBtn { background: darkblue; color: white; }
    .helpBtn { background: orange; color: white; }
	</style>
</head>

<body>
    <div layout:fragment="content">
		<div class="button-container">
			<div><h2>수주조회</h2></div>
			<div>
		        <!-- <button class="cancelBtn" onclick="soEditOpenWindows()">✏️ 수정</button> 
					수정버튼을 눌러서 페이지를 넘기지 않고 자체에서 바로 수정을 함 -->
			</div>
	   </div>
		
		<form action="/sales/so" method="get" th:object="${SalesOrder}">	    
		    <div class="container1">
				<!-- 수주 코드 -->
		        <label class="sell_company_label">수주 코드</label>
				<select class="sell_select" id="soCode">
					<option value="">--선택하세요--</option>
		            <option th:each="code : ${soMainList}"
						th:value="${code.soCode}"
						th:text="${code.soCode}"
					></option><!--selected="${SalesOrder.pdtCode == code}"-->
		        </select>
				
				<!-- 날짜 기간 -->
				<label class="sell_company_label">기간</label>
		        <input type="date" class="sell_date1" id="startDate">
		        <span class="sell_tilt">~</span>
		        <input type="date" class="sell_date2" id="endDate">
				<select class="sell_select" id="dateType">
					<option value="">일자 유형</option>
		            <option value="soDate">수주일자</option><!--selected="${SalesOrder.pdtCode == code}"-->
					<option value="shipDate">출하일자</option>
		        </select>
					
				<!-- 수주 번호 -->			
				<label class="sell_sonum_label" id="soNo">수주번호</label>
		        <input type="text" class="sell_sonum_text">
		        <span></span>
				
				<!-- 검색 버튼 -->
				<button class="requestBtn" onclick="soRegisterOpenWindows()">📃 신규</button>
				<button type="button" class="searchBtn" id="searchBtn">🔍 검색</button>
				<span></span>
		    </div>
	
		    <div class="container2">
				<!-- 제품 코드 -->
		        <label>제품 코드</label>
				<select class="sell_select" id="pdtCode">
					<option value="">--선택하세요--</option>
		            <option th:each="code : ${pdtCode}"
						th:value="${code}"
						th:text="${code}"
					></option><!-- selected="${SalesOrder.pdtCode == code}" -->
		        </select>
		        <input type="text" id="pdtName" placeholder="NAME">
		      
				<!-- 거래처 코드 -->
		        <label>거래처 코드</label>
				<select class="sell_select" id="cltCode">
					<option value="">--선택하세요--</option>
		            <option th:each="code : ${cltCode}"
						th:value="${code}"
						th:text="${code}"
					></option><!-- selected="${SalesOrder.cltCode == code}" -->
		        </select>
		        <input type="text" id="cltName" placeholder="NAME">
		        
				<!-- 진행 상태 -->
				<label>진행상태</label>
				<select class="sell_select" id="soStatus">
					<option value="">--선택하세요--</option>
		            <option th:each="status : ${soStatusList}"
						th:value="${status.statusCode}"
						th:text="${status.statusName}"
					></option><!--selected="${SalesOrder.cltCode == code}"-->
		        </select>
		    </div><!--  <div class="container2"> -->
		</form>
		
		<br>

		<!-- grid 출력 태그 -->
	   	<div id="gridTop" style="width:1600px"></div>
		
		<!-- 자바 스크립트 시작, jQuery포함 -->
	    <script th:inline="javascript">
		console.log(/*[[${soStatusList}]]*/ []);
		//===================================== Grid부분 시작 ===============================================
		
		//모든 컬럼 함깨 표시
		let cltList = /*[[${cltList}]]*/ [];
		let empList = /*[[${empList}]]*/ [];
		let productList = /*[[${productList}]]*/ [];
		let soStatusList = /*[[${soStatusList}]]*/ [];
		
		//2개의 컬럼으로 label과 value를 맞춘다
		let cltListSelected = cltList.map(item => ({label: item.cltCode, value: item.cltName+'('+item.cltCode+')'}));
		let empListSelected = empList.map(item => ({label: item.empNo, value: item.empName+'('+ item.empNo + ')'}));
		let productListSelected = productList.map(item => ({label: item.pdtCode, value: item.pdtName+'('+item.pdtCode+')'}))
		let soStatusListSelected = soStatusList.map(item => ({label: item.statusCode, value: item.statusName+'('+item.statusCode+')'}))
		
		
		console.log(cltList)
		console.log(empList);
		console.log(productList)
		console.log(soStatusList);
		
	    console.log(/*[[${soMainList}]]*/ []);
		
		let gridData = /*[[${soMainList}]]*/ [];
	    
	    const grid = new tui.Grid({
	        el: document.getElementById('gridTop'), 
			//data : /*[[${soMainList}]]*/ [],
			data: gridData,
	        rowHeaders: ['checkbox'], //수정을 따로 안 만들기 때문에 필요가 없어졌다
			//selectionUnit: 'row', //행 단위선택
			scrollX: true,
            scrollY: true,
			width: 1600,  // 전체 너비 지정
			bodyHeight: 550, // 세로 스크롤을 위한 높이 지정
	        columns: [
				{
					header: '수주번호',
					name: 'soNo',
					sortable: true, 
					filter: 'text',
					width: 100,
					align: "center" 
	            },
	            {
	                header: '수주코드',
	                name: 'soCode',
					sortable: true, 
					filter: 'text',
					width: 200,
					align: "center" 
	            },
				{
	                header: '수주일자',
	                name: 'soDate',
					fontSize: '40',
					filter: 'text',
					width: 200,
					align: 'center',
					editor: {
			           type: 'datePicker',
			           options: {
			             format: 'yyyy-MM-dd',  
			             language: 'ko'
			           }
			         }
	            },
				{
	                header: '발주일자',
	                name: 'shipDate',
					sortable: true, 
					filter: 'text',
					width: 200,
					align: "center" ,
					editor: {
			           type: 'datePicker',
			           options: {
			             format: 'yyyy-MM-dd',  
			             language: 'ko'
			           }
			         }
	            },
	            {
					header: '사원번호',
	                name: 'empNo',
					width: 100,
					align: 'center',
					editor: {
						type: 'select',
						options: {
							listItems: empListSelected
						}
					},
					formatter: ({ value }) => {
				    	const emp = empListSelected.find(item => item.value === value);
				    	return emp ? emp.label : value;
				    }
	            },
				{
	                header: '재품코드',
	                name: 'pdtCode', //SalseOrder의 entity에 있는 pdtCode
					width: 200,
					align: 'center',
					editor: {
						type: 'select',
						options: {
							listItems: productListSelected //Products의 entity에 있는 pdtCode와 pdtName
						}
					},
					formatter: ({ value }) => {
				    	const pdt = productListSelected.find(item => item.value === value);
				    	return pdt ? pdt.label : value; 
				    }
	            },
				{
	                header: '거래처코드',
	                name: 'cltCode',
					width: 200,
					align: 'center',
					editor: {
						type: 'select',
						options: {
							listItems: cltListSelected
						}
					},
					formatter: ({ value }) => {
				    	const clt = cltListSelected.find(item => item.value === value);
				    	return clt ? clt.label : value; 
				    }
	            },
	            {
	                header: '수량',
	                name: 'soQuantity',
					sortable: true, 
					filter: 'text',
					width: 100,
					align: "center",
					editor: "text"
	            },
	            {
	                header: '단가',
	                name: 'pdtShippingPrice',
					sortable: true, 
					filter: 'text',
					width: 150,
					align: "center",
					editor: "text"
	            },
				{
					header: '진행상태',
					name: 'soStatus', //salesOrder의 entity에 있는 soStatus
					width: 200,
					align: 'center',
					editor: {
						type: 'select',
						options: {
							listItems: soStatusListSelected //SalesOrderStatus의 배열 값 
						}
					},
					formatter: ({ value }) => {
				    	const stu = soStatusListSelected.find(item => item.value === value);
				    	return stu ? stu.label : value; 
				    }
	            },
	        ], // 열 설정
			autoEdit: true,
			editingEvent: 'dblclick' 
	    });
	    
		let selectedEv = null;
		
		grid.on('click', ev => {
			if(selectedEv !== null){
				grid.removeRowClassName(selectedEv.rowKey, 'selecedRowClass');

			}
			
			selectedEv = ev;
			grid.addRowClassName(selectedEv.rowKey, 'selecedRowClass');
			
		});

		//===================================== 일반 함수 부분 시작 ===============================================
		
		//그리드에서 선택한 값을 저장할 배열 선언
		let gridCheck = [];
		
		//신규 버튼 클릭시 실행되는 입력 창
    	function soRegisterOpenWindows(){
			window.open("/sales/soregisterform", "_blank", "toolbar=no, menubar=no, status=no, width=1100, height=650, resizable=no")	
    	}
		
		//수정 버튼 클릭시 실행되는 수정 창
		function soEditOpenWindows(){
			
			if(gridCheck.length <= 0){
				
				Swal.fire({
				  icon: "warning",
				  title: "선택된 항목이 없습니다.",
				});
				
				return;
			}
			
			let gridCheckString = JSON.stringify(gridCheck);
			window.open("/sales/soeditform?gridCheck="+encodeURIComponent(gridCheckString), "_blank", "toolbar=no, menubar=no, status=no, width=1100, height=650, resizable=no")	
		};
		
		//===================================== jQuery 시작 ===============================================
		$(document).ready(function(){
			
			//제품명 가져오기
			$("#pdtCode").change(function(){
				let pdtValue = $("#pdtCode").val();

				$.ajax({
		           url: "/sales/getPdtName", 
		           type: "GET",       
		           //contentType: "application/json", // GET방식일 때 삭제
		           //data: JSON.stringify(cltValue), // POST방식일 때 stringify 실행
				   data: {pdtCode: pdtValue}, //GET방식 일 때 사용
		           success: function(response) {
						$("#pdtName").val(response);
		           },
		           error: function(error) {
		               alert(error);
		           }
		       });
			});
			
			//거래처명 가져오기
			$("#cltCode").change(function(){
				let cltValue = $("#cltCode").val();
				
				$.ajax({
		           url: "/sales/getCltName", 
		           type: "GET",       
				   data: {cltCode: cltValue},
		           success: function(response) {
						$("#cltName").val(response);
		           },
		           error: function(error) {
		               alert(error);
		           }
		       });
			});
			
			//검색 버튼 클릭시
			$("#searchBtn").on('click', function(){
				
				let data = {
					soCode: $("#soCode").val(),
					soNo: $("#soNo").val(),
					pdtCode: $("#pdtCode").val(),
					cltCode: $("#cltCode").val(),
					soStatus: $("#soStatus").val(),
					dateType: $("#dateType").val(),
					startDate: $("#startDate").val(),
					endDate: $("#endDate").val(),
				}
				
				console.log(data.endDate);
				
				//서버로 검색할 데이터 전송
				
				$.ajax({
					url: "/sales/searchForm",
					type: "GET",
					//contentType: "application/json",
					//data: JSON.stringify(data),
					data: data,
					success: function(response){
						
					},
					error: function(error){
						alert(error)
					}
				});
			});
		})
			
	</script>
	</div> <!-- 여기 안에 있어야 modal, grid, script, jQuery 전부 작동 한다. 이 div는  <div layout:fragment="content"> fragment="content"이다 -->

	<th:block layout:fragment="script">
	
	</th:block>
</body>

</html>